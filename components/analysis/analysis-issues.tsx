import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { AnalysisIssue } from "@/interfaces/analysis.interface";
import {
  AlertTriangle,
  LucideExternalLink,
  LucideSparkles,
} from "lucide-react";
import { useMemo } from "react";

interface AnalysisIssuesProps {
  issues: AnalysisIssue[];
  overallScore: number;
}

export function AnalysisIssues({ issues, overallScore }: AnalysisIssuesProps) {
  const issueTypes = useMemo(() => {
    const types = [...new Set(issues.map((issue) => issue.type))];
    return types.map((type) => ({
      key: type,
      label: type.charAt(0).toUpperCase() + type.slice(1), // Capitalize first letter
      count: issues.filter((issue) => issue.type === type).length,
    }));
  }, [issues]);

  const sortedIssues = [...issues].sort((a, b) => {
    const priorityOrder = { high: 0, medium: 1, low: 2 };
    return priorityOrder[a.priority] - priorityOrder[b.priority];
  });

  const issuesByType = useMemo(() => {
    const grouped: Record<string, AnalysisIssue[]> = {};
    sortedIssues.forEach((issue) => {
      if (!grouped[issue.type]) {
        grouped[issue.type] = [];
      }
      grouped[issue.type].push(issue);
    });
    return grouped;
  }, [sortedIssues]);

  const renderIssuesList = (filteredIssues: AnalysisIssue[]) => (
    <ul
      className="grid grid-cols-1 border rounded-md"
      role="list"
      aria-label={`List of ${filteredIssues.length} accessibility issues`}
    >
      {filteredIssues.map((issue, index) => (
        <li
          key={index}
          className="space-y-4 not-last:border-b border-dashed p-4"
          role="listitem"
          aria-labelledby={`issue-title-${index}`}
          aria-describedby={`issue-description-${index} issue-recommendation-${index}`}
        >
          <header
            className="flex items-center gap-2 flex-wrap"
            role="group"
            aria-label="Issue metadata"
          >
            <Badge
              variant={issue.priority}
              aria-label={`Priority level: ${issue.priority}`}
              title={`Priority: ${issue.priority}`}
            >
              <AlertTriangle className="w-4 h-4 mr-1" aria-hidden="true" />
              <span className="capitalize">{issue.priority}</span>
            </Badge>
            <Badge
              aria-label={`Issue type: ${issue.type}`}
              title={`Category: ${issue.type}`}
            >
              <span className="capitalize">{issue.type}</span>
            </Badge>
          </header>
          <div className="issue-content">
            <h3 id={`issue-title-${index}`} className="font-medium text-base">
              {issue.title}
            </h3>
            <p
              id={`issue-description-${index}`}
              className="text-sm text-muted-foreground"
            >
              {issue.description}
            </p>
          </div>
          <section className="bg-muted p-3 rounded-md border">
            <h4 className="text-sm font-semibold text-muted-foreground mb-1">
              Recommendation:
            </h4>
            <p
              id={`issue-recommendation-${index}`}
              className="text-sm text-muted-foreground"
            >
              {issue.recommendation}
            </p>
          </section>
          {issue.wcagCriterion && (
            <section>
              <h4 className="text-sm font-medium">Reference:</h4>
              <a
                href={issue.wcagCriterion.link}
                target="_blank"
                className="text-sm text-muted-foreground mb-1 flex flex-row items-center gap-2"
              >
                <span>
                  WCAG: {issue.wcagCriterion.name} - {issue.wcagCriterion.id}
                </span>
                <LucideExternalLink className="size-3" />
              </a>
            </section>
          )}
        </li>
      ))}
    </ul>
  );

  const categoryNames =
    issueTypes.length > 0
      ? issueTypes.map((type) => type.label).join(", ")
      : "various categories";

  return (
    <section
      className="col-span-2 col-start-1"
      aria-labelledby="analysis-result-heading"
      role="region"
    >
      <header className="flex justify-between items-center p-4">
        <div>
          <h2
            id="analysis-result-heading"
            className="font-semibold text-lg pb-2"
          >
            Analysis Result
            <Badge
              variant="outline"
              className="ml-2"
              aria-label="Content generated by artificial intelligence"
              title="This analysis was generated using AI"
            >
              <LucideSparkles className="w-3 h-3 mr-1" aria-hidden="true" />
              <span>AI Generated</span>
            </Badge>
          </h2>
          <p
            className="text-muted-foreground text-sm"
            aria-live="polite"
            aria-atomic="true"
          >
            {issues.length} {issues.length === 1 ? "issue" : "issues"} found
            across {categoryNames}
          </p>
        </div>
        <div className="score-display" aria-labelledby="overall-score-label">
          <span id="overall-score-label" className="sr-only">
            Overall accessibility score:
          </span>
          <div
            aria-label={`Accessibility score: ${overallScore} out of 100`}
            title={`Overall score: ${overallScore}/100`}
          >
            <span className="text-4xl font-bold">{overallScore}</span>
            <span className="text-sm">/100</span>
          </div>
        </div>
      </header>

      <Tabs
        defaultValue="all"
        className="w-full"
        aria-label="Filter accessibility issues by category"
      >
        <TabsList aria-label="Issue categories">
          <TabsTrigger
            value="all"
            aria-label={`View all ${issues.length} issues`}
          >
            All ({issues.length})
          </TabsTrigger>
          {issueTypes.map((type) => (
            <TabsTrigger
              key={type.key}
              value={type.key}
              aria-label={`View ${
                type.count
              } ${type.label.toLowerCase()} issues`}
            >
              {type.label} ({type.count})
            </TabsTrigger>
          ))}
        </TabsList>

        <TabsContent
          value="all"
          className="mt-4"
          aria-labelledby="all-issues-heading"
        >
          <h3 id="all-issues-heading" className="sr-only">
            All accessibility issues
          </h3>
          {renderIssuesList(sortedIssues)}
        </TabsContent>

        {issueTypes.map((type) => (
          <TabsContent
            key={type.key}
            value={type.key}
            className="mt-4"
            aria-labelledby={`${type.key}-issues-heading`}
          >
            <h3 id={`${type.key}-issues-heading`} className="sr-only">
              {type.label} accessibility issues
            </h3>
            {issuesByType[type.key]?.length > 0 ? (
              renderIssuesList(issuesByType[type.key])
            ) : (
              <div
                className="text-muted-foreground text-center py-8"
                role="status"
                aria-live="polite"
              >
                <p>No {type.label.toLowerCase()} issues found</p>
              </div>
            )}
          </TabsContent>
        ))}
      </Tabs>
    </section>
  );
}
